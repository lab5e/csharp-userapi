/*
 * The User API
 *
 * API to manage teams, members and tokens
 *
 * The version of the OpenAPI document: 1.3.6 crooked-daija
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.User.Client;
using Com.Lab5e.User.Model;

namespace Com.Lab5e.User.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create token
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Token</returns>
        Token CreateToken(Token body);

        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> CreateTokenWithHttpInfo(Token body);
        /// <summary>
        /// Remove token
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <returns>DeleteTokenResponse</returns>
        DeleteTokenResponse DeleteToken(string token);

        /// <summary>
        /// Remove token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <returns>ApiResponse of DeleteTokenResponse</returns>
        ApiResponse<DeleteTokenResponse> DeleteTokenWithHttpInfo(string token);
        /// <summary>
        /// List tokens
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TokenList</returns>
        TokenList ListTokens();

        /// <summary>
        /// List tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TokenList</returns>
        ApiResponse<TokenList> ListTokensWithHttpInfo();
        /// <summary>
        /// Retrieve token
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Token</returns>
        Token RetrieveToken(string token);

        /// <summary>
        /// Retrieve token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> RetrieveTokenWithHttpInfo(string token);
        /// <summary>
        /// Update token
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <returns>Token</returns>
        Token UpdateToken(string token, Token body);

        /// <summary>
        /// Update token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> UpdateTokenWithHttpInfo(string token, Token body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> CreateTokenAsync(Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> CreateTokenWithHttpInfoAsync(Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTokenResponse</returns>
        System.Threading.Tasks.Task<DeleteTokenResponse> DeleteTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTokenResponse>> DeleteTokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenList</returns>
        System.Threading.Tasks.Task<TokenList> ListTokensAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenList>> ListTokensWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> RetrieveTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> RetrieveTokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> UpdateTokenAsync(string token, Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> UpdateTokenWithHttpInfoAsync(string token, Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApi : ITokensApiSync, ITokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokensApi : ITokensApi
    {
        private Com.Lab5e.User.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi(String basePath)
        {
            this.Configuration = Com.Lab5e.User.Client.Configuration.MergeConfigurations(
                Com.Lab5e.User.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.User.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokensApi(Com.Lab5e.User.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.User.Client.Configuration.MergeConfigurations(
                Com.Lab5e.User.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokensApi(Com.Lab5e.User.Client.ISynchronousClient client, Com.Lab5e.User.Client.IAsynchronousClient asyncClient, Com.Lab5e.User.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.User.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.User.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.User.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.User.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Token</returns>
        public Token CreateToken(Token body)
        {
            Com.Lab5e.User.Client.ApiResponse<Token> localVarResponse = CreateTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Token</returns>
        public Com.Lab5e.User.Client.ApiResponse<Token> CreateTokenWithHttpInfo(Token body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TokensApi->CreateToken");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Token>("/user/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> CreateTokenAsync(Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Token> localVarResponse = await CreateTokenWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Token>> CreateTokenWithHttpInfoAsync(Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TokensApi->CreateToken");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Token>("/user/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <returns>DeleteTokenResponse</returns>
        public DeleteTokenResponse DeleteToken(string token)
        {
            Com.Lab5e.User.Client.ApiResponse<DeleteTokenResponse> localVarResponse = DeleteTokenWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <returns>ApiResponse of DeleteTokenResponse</returns>
        public Com.Lab5e.User.Client.ApiResponse<DeleteTokenResponse> DeleteTokenWithHttpInfo(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'token' when calling TokensApi->DeleteToken");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Com.Lab5e.User.Client.ClientUtils.ParameterToString(token)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTokenResponse>("/user/tokens/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTokenResponse</returns>
        public async System.Threading.Tasks.Task<DeleteTokenResponse> DeleteTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<DeleteTokenResponse> localVarResponse = await DeleteTokenWithHttpInfoAsync(token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<DeleteTokenResponse>> DeleteTokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'token' when calling TokensApi->DeleteToken");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Com.Lab5e.User.Client.ClientUtils.ParameterToString(token)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTokenResponse>("/user/tokens/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List tokens 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TokenList</returns>
        public TokenList ListTokens()
        {
            Com.Lab5e.User.Client.ApiResponse<TokenList> localVarResponse = ListTokensWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List tokens 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TokenList</returns>
        public Com.Lab5e.User.Client.ApiResponse<TokenList> ListTokensWithHttpInfo()
        {
            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenList>("/user/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List tokens 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenList</returns>
        public async System.Threading.Tasks.Task<TokenList> ListTokensAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<TokenList> localVarResponse = await ListTokensWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List tokens 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<TokenList>> ListTokensWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenList>("/user/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Token</returns>
        public Token RetrieveToken(string token)
        {
            Com.Lab5e.User.Client.ApiResponse<Token> localVarResponse = RetrieveTokenWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of Token</returns>
        public Com.Lab5e.User.Client.ApiResponse<Token> RetrieveTokenWithHttpInfo(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'token' when calling TokensApi->RetrieveToken");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Com.Lab5e.User.Client.ClientUtils.ParameterToString(token)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Token>("/user/tokens/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> RetrieveTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Token> localVarResponse = await RetrieveTokenWithHttpInfoAsync(token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Token>> RetrieveTokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'token' when calling TokensApi->RetrieveToken");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Com.Lab5e.User.Client.ClientUtils.ParameterToString(token)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Token>("/user/tokens/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <returns>Token</returns>
        public Token UpdateToken(string token, Token body)
        {
            Com.Lab5e.User.Client.ApiResponse<Token> localVarResponse = UpdateTokenWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Token</returns>
        public Com.Lab5e.User.Client.ApiResponse<Token> UpdateTokenWithHttpInfo(string token, Token body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'token' when calling TokensApi->UpdateToken");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TokensApi->UpdateToken");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Com.Lab5e.User.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Token>("/user/tokens/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> UpdateTokenAsync(string token, Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Token> localVarResponse = await UpdateTokenWithHttpInfoAsync(token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update token 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token  Use this in the &#x60;X-API-Token&#x60; header when using the API.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Token>> UpdateTokenWithHttpInfoAsync(string token, Token body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'token' when calling TokensApi->UpdateToken");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TokensApi->UpdateToken");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Com.Lab5e.User.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Token>("/user/tokens/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
