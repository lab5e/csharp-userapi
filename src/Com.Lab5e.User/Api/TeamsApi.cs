/*
 * The User API
 *
 * API to manage teams, members and tokens
 *
 * The version of the OpenAPI document: 1.3.5 everlasting-ashanti
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.User.Client;
using Com.Lab5e.User.Model;

namespace Com.Lab5e.User.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team UserAcceptInvite(AcceptInviteRequest body);

        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UserAcceptInviteWithHttpInfo(AcceptInviteRequest body);
        /// <summary>
        /// Create team
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team UserCreateTeam(Team body);

        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UserCreateTeamWithHttpInfo(Team body);
        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>Object</returns>
        Object UserDeleteInvite(string teamId, string code);

        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UserDeleteInviteWithHttpInfo(string teamId, string code);
        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        Member UserDeleteMember(string teamId, string userId);

        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        ApiResponse<Member> UserDeleteMemberWithHttpInfo(string teamId, string userId);
        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        Team UserDeleteTeam(string teamId);

        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UserDeleteTeamWithHttpInfo(string teamId);
        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>Invite</returns>
        Invite UserGenerateInvite(string teamId, InviteRequest body);

        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Invite</returns>
        ApiResponse<Invite> UserGenerateInviteWithHttpInfo(string teamId, InviteRequest body);
        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>InviteList</returns>
        InviteList UserListInvites(string teamId);

        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of InviteList</returns>
        ApiResponse<InviteList> UserListInvitesWithHttpInfo(string teamId);
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamList</returns>
        TeamList UserListTeams();

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamList</returns>
        ApiResponse<TeamList> UserListTeamsWithHttpInfo();
        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>Invite</returns>
        Invite UserRetrieveInvite(string teamId, string code);

        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of Invite</returns>
        ApiResponse<Invite> UserRetrieveInviteWithHttpInfo(string teamId, string code);
        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        Member UserRetrieveMember(string teamId, string userId);

        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        ApiResponse<Member> UserRetrieveMemberWithHttpInfo(string teamId, string userId);
        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        Team UserRetrieveTeam(string teamId);

        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UserRetrieveTeamWithHttpInfo(string teamId);
        /// <summary>
        /// List members
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>MemberList</returns>
        MemberList UserRetrieveTeamMembers(string teamId);

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of MemberList</returns>
        ApiResponse<MemberList> UserRetrieveTeamMembersWithHttpInfo(string teamId);
        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>Member</returns>
        Member UserUpdateMember(string teamId, string userId, Member body);

        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Member</returns>
        ApiResponse<Member> UserUpdateMemberWithHttpInfo(string teamId, string userId, Member body);
        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team UserUpdateTeam(string teamId, Team body);

        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UserUpdateTeamWithHttpInfo(string teamId, Team body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UserAcceptInviteAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UserAcceptInviteWithHttpInfoAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UserCreateTeamAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UserCreateTeamWithHttpInfoAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UserDeleteInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDeleteInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        System.Threading.Tasks.Task<Member> UserDeleteMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        System.Threading.Tasks.Task<ApiResponse<Member>> UserDeleteMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UserDeleteTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UserDeleteTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        System.Threading.Tasks.Task<Invite> UserGenerateInviteAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invite>> UserGenerateInviteWithHttpInfoAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteList</returns>
        System.Threading.Tasks.Task<InviteList> UserListInvitesAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteList)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteList>> UserListInvitesWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamList</returns>
        System.Threading.Tasks.Task<TeamList> UserListTeamsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamList>> UserListTeamsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        System.Threading.Tasks.Task<Invite> UserRetrieveInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invite>> UserRetrieveInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        System.Threading.Tasks.Task<Member> UserRetrieveMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        System.Threading.Tasks.Task<ApiResponse<Member>> UserRetrieveMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UserRetrieveTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UserRetrieveTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberList</returns>
        System.Threading.Tasks.Task<MemberList> UserRetrieveTeamMembersAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberList>> UserRetrieveTeamMembersWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        System.Threading.Tasks.Task<Member> UserUpdateMemberAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        System.Threading.Tasks.Task<ApiResponse<Member>> UserUpdateMemberWithHttpInfoAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UserUpdateTeamAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UserUpdateTeamWithHttpInfoAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : ITeamsApiSync, ITeamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private Com.Lab5e.User.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = Com.Lab5e.User.Client.Configuration.MergeConfigurations(
                Com.Lab5e.User.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.User.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Com.Lab5e.User.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.User.Client.Configuration.MergeConfigurations(
                Com.Lab5e.User.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamsApi(Com.Lab5e.User.Client.ISynchronousClient client, Com.Lab5e.User.Client.IAsynchronousClient asyncClient, Com.Lab5e.User.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.User.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.User.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.User.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.User.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team UserAcceptInvite(AcceptInviteRequest body)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = UserAcceptInviteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> UserAcceptInviteWithHttpInfo(AcceptInviteRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserAcceptInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Team>("/user/teams/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAcceptInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UserAcceptInviteAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await UserAcceptInviteWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> UserAcceptInviteWithHttpInfoAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserAcceptInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Team>("/user/teams/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAcceptInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team UserCreateTeam(Team body)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = UserCreateTeamWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> UserCreateTeamWithHttpInfo(Team body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserCreateTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Team>("/user/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UserCreateTeamAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await UserCreateTeamWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> UserCreateTeamWithHttpInfoAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserCreateTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Team>("/user/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>Object</returns>
        public Object UserDeleteInvite(string teamId, string code)
        {
            Com.Lab5e.User.Client.ApiResponse<Object> localVarResponse = UserDeleteInviteWithHttpInfo(teamId, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Lab5e.User.Client.ApiResponse<Object> UserDeleteInviteWithHttpInfo(string teamId, string code)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserDeleteInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->UserDeleteInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UserDeleteInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Object> localVarResponse = await UserDeleteInviteWithHttpInfoAsync(teamId, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Object>> UserDeleteInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserDeleteInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->UserDeleteInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        public Member UserDeleteMember(string teamId, string userId)
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = UserDeleteMemberWithHttpInfo(teamId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        public Com.Lab5e.User.Client.ApiResponse<Member> UserDeleteMemberWithHttpInfo(string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserDeleteMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UserDeleteMember");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        public async System.Threading.Tasks.Task<Member> UserDeleteMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = await UserDeleteMemberWithHttpInfoAsync(teamId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Member>> UserDeleteMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserDeleteMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UserDeleteMember");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        public Team UserDeleteTeam(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = UserDeleteTeamWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> UserDeleteTeamWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserDeleteTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UserDeleteTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await UserDeleteTeamWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> UserDeleteTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserDeleteTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>Invite</returns>
        public Invite UserGenerateInvite(string teamId, InviteRequest body)
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = UserGenerateInviteWithHttpInfo(teamId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Invite</returns>
        public Com.Lab5e.User.Client.ApiResponse<Invite> UserGenerateInviteWithHttpInfo(string teamId, InviteRequest body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserGenerateInvite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserGenerateInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Invite>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGenerateInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        public async System.Threading.Tasks.Task<Invite> UserGenerateInviteAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = await UserGenerateInviteWithHttpInfoAsync(teamId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Invite>> UserGenerateInviteWithHttpInfoAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserGenerateInvite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserGenerateInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Invite>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGenerateInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>InviteList</returns>
        public InviteList UserListInvites(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<InviteList> localVarResponse = UserListInvitesWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of InviteList</returns>
        public Com.Lab5e.User.Client.ApiResponse<InviteList> UserListInvitesWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserListInvites");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InviteList>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteList</returns>
        public async System.Threading.Tasks.Task<InviteList> UserListInvitesAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<InviteList> localVarResponse = await UserListInvitesWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<InviteList>> UserListInvitesWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserListInvites");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InviteList>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamList</returns>
        public TeamList UserListTeams()
        {
            Com.Lab5e.User.Client.ApiResponse<TeamList> localVarResponse = UserListTeamsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamList</returns>
        public Com.Lab5e.User.Client.ApiResponse<TeamList> UserListTeamsWithHttpInfo()
        {
            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TeamList>("/user/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamList</returns>
        public async System.Threading.Tasks.Task<TeamList> UserListTeamsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<TeamList> localVarResponse = await UserListTeamsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<TeamList>> UserListTeamsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamList>("/user/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>Invite</returns>
        public Invite UserRetrieveInvite(string teamId, string code)
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = UserRetrieveInviteWithHttpInfo(teamId, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of Invite</returns>
        public Com.Lab5e.User.Client.ApiResponse<Invite> UserRetrieveInviteWithHttpInfo(string teamId, string code)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->UserRetrieveInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Invite>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        public async System.Threading.Tasks.Task<Invite> UserRetrieveInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = await UserRetrieveInviteWithHttpInfoAsync(teamId, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Invite>> UserRetrieveInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->UserRetrieveInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Invite>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        public Member UserRetrieveMember(string teamId, string userId)
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = UserRetrieveMemberWithHttpInfo(teamId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        public Com.Lab5e.User.Client.ApiResponse<Member> UserRetrieveMemberWithHttpInfo(string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UserRetrieveMember");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        public async System.Threading.Tasks.Task<Member> UserRetrieveMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = await UserRetrieveMemberWithHttpInfoAsync(teamId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Member>> UserRetrieveMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UserRetrieveMember");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        public Team UserRetrieveTeam(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = UserRetrieveTeamWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> UserRetrieveTeamWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UserRetrieveTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await UserRetrieveTeamWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> UserRetrieveTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>MemberList</returns>
        public MemberList UserRetrieveTeamMembers(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<MemberList> localVarResponse = UserRetrieveTeamMembersWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of MemberList</returns>
        public Com.Lab5e.User.Client.ApiResponse<MemberList> UserRetrieveTeamMembersWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveTeamMembers");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberList>("/user/teams/{teamId}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveTeamMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberList</returns>
        public async System.Threading.Tasks.Task<MemberList> UserRetrieveTeamMembersAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<MemberList> localVarResponse = await UserRetrieveTeamMembersWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<MemberList>> UserRetrieveTeamMembersWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserRetrieveTeamMembers");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberList>("/user/teams/{teamId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRetrieveTeamMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>Member</returns>
        public Member UserUpdateMember(string teamId, string userId, Member body)
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = UserUpdateMemberWithHttpInfo(teamId, userId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Member</returns>
        public Com.Lab5e.User.Client.ApiResponse<Member> UserUpdateMemberWithHttpInfo(string teamId, string userId, Member body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserUpdateMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UserUpdateMember");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserUpdateMember");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        public async System.Threading.Tasks.Task<Member> UserUpdateMemberAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = await UserUpdateMemberWithHttpInfoAsync(teamId, userId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Member>> UserUpdateMemberWithHttpInfoAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserUpdateMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UserUpdateMember");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserUpdateMember");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team UserUpdateTeam(string teamId, Team body)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = UserUpdateTeamWithHttpInfo(teamId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> UserUpdateTeamWithHttpInfo(string teamId, Team body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserUpdateTeam");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserUpdateTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UserUpdateTeamAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await UserUpdateTeamWithHttpInfoAsync(teamId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> UserUpdateTeamWithHttpInfoAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UserUpdateTeam");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UserUpdateTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
