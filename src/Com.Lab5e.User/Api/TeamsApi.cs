/*
 * The User API
 *
 * API to manage teams, members and tokens
 *
 * The version of the OpenAPI document: 1.3.11 lucky-fremont
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.User.Client;
using Com.Lab5e.User.Model;

namespace Com.Lab5e.User.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team AcceptInvite(AcceptInviteRequest body);

        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> AcceptInviteWithHttpInfo(AcceptInviteRequest body);
        /// <summary>
        /// Create team
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team CreateTeam(Team body);

        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> CreateTeamWithHttpInfo(Team body);
        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>DeleteInviteResponse</returns>
        DeleteInviteResponse DeleteInvite(string teamId, string code);

        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of DeleteInviteResponse</returns>
        ApiResponse<DeleteInviteResponse> DeleteInviteWithHttpInfo(string teamId, string code);
        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        Member DeleteMember(string teamId, string userId);

        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        ApiResponse<Member> DeleteMemberWithHttpInfo(string teamId, string userId);
        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        Team DeleteTeam(string teamId);

        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> DeleteTeamWithHttpInfo(string teamId);
        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>Invite</returns>
        Invite GenerateInvite(string teamId, InviteRequest body);

        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Invite</returns>
        ApiResponse<Invite> GenerateInviteWithHttpInfo(string teamId, InviteRequest body);
        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>InviteList</returns>
        InviteList ListInvites(string teamId);

        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of InviteList</returns>
        ApiResponse<InviteList> ListInvitesWithHttpInfo(string teamId);
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamList</returns>
        TeamList ListTeams();

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamList</returns>
        ApiResponse<TeamList> ListTeamsWithHttpInfo();
        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>Invite</returns>
        Invite RetrieveInvite(string teamId, string code);

        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of Invite</returns>
        ApiResponse<Invite> RetrieveInviteWithHttpInfo(string teamId, string code);
        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        Member RetrieveMember(string teamId, string userId);

        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        ApiResponse<Member> RetrieveMemberWithHttpInfo(string teamId, string userId);
        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        Team RetrieveTeam(string teamId);

        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> RetrieveTeamWithHttpInfo(string teamId);
        /// <summary>
        /// List members
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>MemberList</returns>
        MemberList RetrieveTeamMembers(string teamId);

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of MemberList</returns>
        ApiResponse<MemberList> RetrieveTeamMembersWithHttpInfo(string teamId);
        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>Member</returns>
        Member UpdateMember(string teamId, string userId, Member body);

        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Member</returns>
        ApiResponse<Member> UpdateMemberWithHttpInfo(string teamId, string userId, Member body);
        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team UpdateTeam(string teamId, Team body);

        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UpdateTeamWithHttpInfo(string teamId, Team body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> AcceptInviteAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept invite
        /// </summary>
        /// <remarks>
        /// Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> AcceptInviteWithHttpInfoAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> CreateTeamAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> CreateTeamWithHttpInfoAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInviteResponse</returns>
        System.Threading.Tasks.Task<DeleteInviteResponse> DeleteInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>
        /// Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInviteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteInviteResponse>> DeleteInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        System.Threading.Tasks.Task<Member> DeleteMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove member
        /// </summary>
        /// <remarks>
        /// Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        System.Threading.Tasks.Task<ApiResponse<Member>> DeleteMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> DeleteTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> DeleteTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        System.Threading.Tasks.Task<Invite> GenerateInviteAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate invite
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invite>> GenerateInviteWithHttpInfoAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteList</returns>
        System.Threading.Tasks.Task<InviteList> ListInvitesAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteList)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteList>> ListInvitesWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamList</returns>
        System.Threading.Tasks.Task<TeamList> ListTeamsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamList>> ListTeamsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        System.Threading.Tasks.Task<Invite> RetrieveInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>
        /// Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invite>> RetrieveInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        System.Threading.Tasks.Task<Member> RetrieveMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        System.Threading.Tasks.Task<ApiResponse<Member>> RetrieveMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> RetrieveTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> RetrieveTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberList</returns>
        System.Threading.Tasks.Task<MemberList> RetrieveTeamMembersAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberList>> RetrieveTeamMembersWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        System.Threading.Tasks.Task<Member> UpdateMemberAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// You must be an administrator of the team to update member settings
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        System.Threading.Tasks.Task<ApiResponse<Member>> UpdateMemberWithHttpInfoAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update the team. You must be an administrator of the team to edit it.
        /// </remarks>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UpdateTeamWithHttpInfoAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : ITeamsApiSync, ITeamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private Com.Lab5e.User.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = Com.Lab5e.User.Client.Configuration.MergeConfigurations(
                Com.Lab5e.User.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.User.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Com.Lab5e.User.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.User.Client.Configuration.MergeConfigurations(
                Com.Lab5e.User.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.User.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamsApi(Com.Lab5e.User.Client.ISynchronousClient client, Com.Lab5e.User.Client.IAsynchronousClient asyncClient, Com.Lab5e.User.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.User.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.User.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.User.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.User.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.User.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team AcceptInvite(AcceptInviteRequest body)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = AcceptInviteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> AcceptInviteWithHttpInfo(AcceptInviteRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->AcceptInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Team>("/user/teams/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> AcceptInviteAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await AcceptInviteWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept invite Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> AcceptInviteWithHttpInfoAsync(AcceptInviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->AcceptInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Team>("/user/teams/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team CreateTeam(Team body)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = CreateTeamWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> CreateTeamWithHttpInfo(Team body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->CreateTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Team>("/user/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> CreateTeamAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await CreateTeamWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> CreateTeamWithHttpInfoAsync(Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->CreateTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Team>("/user/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>DeleteInviteResponse</returns>
        public DeleteInviteResponse DeleteInvite(string teamId, string code)
        {
            Com.Lab5e.User.Client.ApiResponse<DeleteInviteResponse> localVarResponse = DeleteInviteWithHttpInfo(teamId, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of DeleteInviteResponse</returns>
        public Com.Lab5e.User.Client.ApiResponse<DeleteInviteResponse> DeleteInviteWithHttpInfo(string teamId, string code)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->DeleteInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteInviteResponse>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInviteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteInviteResponse> DeleteInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<DeleteInviteResponse> localVarResponse = await DeleteInviteWithHttpInfoAsync(teamId, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete invite Delete an invite created earlier. You must be an administrator of the team to perform this action
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInviteResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<DeleteInviteResponse>> DeleteInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->DeleteInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteInviteResponse>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        public Member DeleteMember(string teamId, string userId)
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = DeleteMemberWithHttpInfo(teamId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        public Com.Lab5e.User.Client.ApiResponse<Member> DeleteMemberWithHttpInfo(string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->DeleteMember");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        public async System.Threading.Tasks.Task<Member> DeleteMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = await DeleteMemberWithHttpInfoAsync(teamId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove member Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Member>> DeleteMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->DeleteMember");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        public Team DeleteTeam(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = DeleteTeamWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> DeleteTeamWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> DeleteTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await DeleteTeamWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> DeleteTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>Invite</returns>
        public Invite GenerateInvite(string teamId, InviteRequest body)
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = GenerateInviteWithHttpInfo(teamId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Invite</returns>
        public Com.Lab5e.User.Client.ApiResponse<Invite> GenerateInviteWithHttpInfo(string teamId, InviteRequest body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GenerateInvite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->GenerateInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Invite>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        public async System.Threading.Tasks.Task<Invite> GenerateInviteAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = await GenerateInviteWithHttpInfoAsync(teamId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate invite Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Invite>> GenerateInviteWithHttpInfoAsync(string teamId, InviteRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GenerateInvite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->GenerateInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Invite>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>InviteList</returns>
        public InviteList ListInvites(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<InviteList> localVarResponse = ListInvitesWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of InviteList</returns>
        public Com.Lab5e.User.Client.ApiResponse<InviteList> ListInvitesWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->ListInvites");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InviteList>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InviteList</returns>
        public async System.Threading.Tasks.Task<InviteList> ListInvitesAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<InviteList> localVarResponse = await ListInvitesWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List invites Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InviteList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<InviteList>> ListInvitesWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->ListInvites");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InviteList>("/user/teams/{teamId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamList</returns>
        public TeamList ListTeams()
        {
            Com.Lab5e.User.Client.ApiResponse<TeamList> localVarResponse = ListTeamsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamList</returns>
        public Com.Lab5e.User.Client.ApiResponse<TeamList> ListTeamsWithHttpInfo()
        {
            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TeamList>("/user/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamList</returns>
        public async System.Threading.Tasks.Task<TeamList> ListTeamsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<TeamList> localVarResponse = await ListTeamsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List teams Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<TeamList>> ListTeamsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamList>("/user/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>Invite</returns>
        public Invite RetrieveInvite(string teamId, string code)
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = RetrieveInviteWithHttpInfo(teamId, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <returns>ApiResponse of Invite</returns>
        public Com.Lab5e.User.Client.ApiResponse<Invite> RetrieveInviteWithHttpInfo(string teamId, string code)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->RetrieveInvite");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Invite>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invite</returns>
        public async System.Threading.Tasks.Task<Invite> RetrieveInviteAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Invite> localVarResponse = await RetrieveInviteWithHttpInfoAsync(teamId, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invite Read a single invite from the team&#39;s set of non-redeemed invites.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="code">The invite code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invite)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Invite>> RetrieveInviteWithHttpInfoAsync(string teamId, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveInvite");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'code' when calling TeamsApi->RetrieveInvite");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Com.Lab5e.User.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Invite>("/user/teams/{teamId}/invites/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>Member</returns>
        public Member RetrieveMember(string teamId, string userId)
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = RetrieveMemberWithHttpInfo(teamId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <returns>ApiResponse of Member</returns>
        public Com.Lab5e.User.Client.ApiResponse<Member> RetrieveMemberWithHttpInfo(string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->RetrieveMember");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        public async System.Threading.Tasks.Task<Member> RetrieveMemberAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = await RetrieveMemberWithHttpInfoAsync(teamId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve member 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="userId">The user ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Member>> RetrieveMemberWithHttpInfoAsync(string teamId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->RetrieveMember");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>Team</returns>
        public Team RetrieveTeam(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = RetrieveTeamWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> RetrieveTeamWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> RetrieveTeamAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await RetrieveTeamWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve team 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> RetrieveTeamWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>MemberList</returns>
        public MemberList RetrieveTeamMembers(string teamId)
        {
            Com.Lab5e.User.Client.ApiResponse<MemberList> localVarResponse = RetrieveTeamMembersWithHttpInfo(teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <returns>ApiResponse of MemberList</returns>
        public Com.Lab5e.User.Client.ApiResponse<MemberList> RetrieveTeamMembersWithHttpInfo(string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveTeamMembers");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberList>("/user/teams/{teamId}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveTeamMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberList</returns>
        public async System.Threading.Tasks.Task<MemberList> RetrieveTeamMembersAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<MemberList> localVarResponse = await RetrieveTeamMembersWithHttpInfoAsync(teamId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List members 
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberList)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<MemberList>> RetrieveTeamMembersWithHttpInfoAsync(string teamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->RetrieveTeamMembers");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberList>("/user/teams/{teamId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveTeamMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>Member</returns>
        public Member UpdateMember(string teamId, string userId, Member body)
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = UpdateMemberWithHttpInfo(teamId, userId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Member</returns>
        public Com.Lab5e.User.Client.ApiResponse<Member> UpdateMemberWithHttpInfo(string teamId, string userId, Member body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UpdateMember");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UpdateMember");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Member</returns>
        public async System.Threading.Tasks.Task<Member> UpdateMemberAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Member> localVarResponse = await UpdateMemberWithHttpInfoAsync(teamId, userId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member You must be an administrator of the team to update member settings
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="userId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Member)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Member>> UpdateMemberWithHttpInfoAsync(string teamId, string userId, Member body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateMember");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UpdateMember");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UpdateMember");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Member>("/user/teams/{teamId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team UpdateTeam(string teamId, Team body)
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = UpdateTeamWithHttpInfo(teamId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Com.Lab5e.User.Client.ApiResponse<Team> UpdateTeamWithHttpInfo(string teamId, Team body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateTeam");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UpdateTeam");

            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UpdateTeamAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.User.Client.ApiResponse<Team> localVarResponse = await UpdateTeamWithHttpInfoAsync(teamId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update team Update the team. You must be an administrator of the team to edit it.
        /// </summary>
        /// <exception cref="Com.Lab5e.User.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.User.Client.ApiResponse<Team>> UpdateTeamWithHttpInfoAsync(string teamId, Team body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateTeam");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.User.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->UpdateTeam");


            Com.Lab5e.User.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.User.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.User.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.User.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("teamId", Com.Lab5e.User.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Team>("/user/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
